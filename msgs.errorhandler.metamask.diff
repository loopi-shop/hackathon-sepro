diff --git a/front-issuer/src/pages/auth/login.js b/front-issuer/src/pages/auth/login.js
index 4ab5109..b03dd16 100644
--- a/front-issuer/src/pages/auth/login.js
+++ b/front-issuer/src/pages/auth/login.js
@@ -1,26 +1,22 @@
-import { useCallback, useState } from 'react';
-import Head from 'next/head';
-import NextLink from 'next/link';
-import { useRouter } from 'next/navigation';
-import { Box, Button, Icon, Link, Stack, Typography } from '@mui/material';
-import { useAuth } from 'src/hooks/use-auth';
-import { Layout as AuthLayout } from 'src/layouts/auth/layout';
-import { useSDK } from '@metamask/sdk-react';
+import { useCallback, useState } from "react";
+import Head from "next/head";
+import NextLink from "next/link";
+import { useRouter } from "next/navigation";
+import { Box, Button, Icon, Link, Stack, Typography } from "@mui/material";
+import { useAuth } from "src/hooks/use-auth";
+import { Layout as AuthLayout } from "src/layouts/auth/layout";
+import { useSDK } from "@metamask/sdk-react";
 
 const Page = () => {
   const router = useRouter();
   const auth = useAuth();
-  const [account, setAccount] = useState('');
+  const [account, setAccount] = useState("");
   const [errors, setErrors] = useState([]);
   const { sdk, connected, chainId } = useSDK();
 
-  const handleSkip = useCallback(
-    () => {
-      auth.skip()
-          .then(() => router.push('/'));
-    },
-    [auth, router]
-  );
+  const handleSkip = useCallback(() => {
+    auth.skip().then(() => router.push("/"));
+  }, [auth, router]);
 
   const connect = async () => {
     try {
@@ -29,20 +25,21 @@ const Page = () => {
       setAccount(accounts?.[0]);
 
       const publicKey = accounts?.[0];
-      await auth.signIn(`${publicKey}@loopipay.com`, `pass${publicKey}`)
-        .catch(error => {
-          console.error('Fail on Login', error);
-          console.log(JSON.stringify(error))
+      await auth.signIn(`${publicKey}@loopipay.com`, `pass${publicKey}`).catch((error) => {
+        console.error("Fail on Login", error);
+        console.log(JSON.stringify(error));
 
-          const errorMessage = ['auth/invalid-email','auth/invalid-login-credentials'].includes(error.code)
-            ? 'User Not found'
-            : error;
+        const errorMessage = ["auth/invalid-email", "auth/invalid-login-credentials"].includes(
+          error.code
+        )
+          ? "User Not found"
+          : error;
 
-          setErrors([errorMessage]);
-          throw error;
-        });
-        router.push('/');
-    } catch(err) {
+        setErrors([errorMessage]);
+        throw error;
+      });
+      router.push("/");
+    } catch (err) {
       console.warn(`failed to connect..`, err);
     }
   };
@@ -50,75 +47,46 @@ const Page = () => {
   return (
     <>
       <Head>
-        <title>
-          Login | Devias Kit
-        </title>
+        <title>Entrar | Devias Kit</title>
       </Head>
       <Box
         sx={{
-          backgroundColor: 'background.paper',
-          flex: '1 1 auto',
-          alignItems: 'center',
-          display: 'flex',
-          justifyContent: 'center'
+          backgroundColor: "background.paper",
+          flex: "1 1 auto",
+          alignItems: "center",
+          display: "flex",
+          justifyContent: "center",
         }}
       >
         <Box
           sx={{
             maxWidth: 550,
             px: 3,
-            py: '100px',
-            width: '100%'
+            py: "100px",
+            width: "100%",
           }}
         >
           <div>
-            <Stack
-              spacing={1}
-              sx={{ mb: 3 }}
-            >
-              <Typography variant="h4">
-                Login
-              </Typography>
-              <Typography
-                color="text.secondary"
-                variant="body2"
-              >
-                Don&apos;t have an account?
-                &nbsp;
+            <Stack spacing={1} sx={{ mb: 3 }}>
+              <Typography variant="h4">Entrar</Typography>
+              <Typography color="text.secondary" variant="body2">
+                Não tem uma conta? &nbsp;
                 <Link
                   component={NextLink}
                   href="/auth/register"
                   underline="hover"
                   variant="subtitle2"
                 >
-                  Register
+                  Registrar
                 </Link>
               </Typography>
             </Stack>
-            <Button
-                fullWidth
-                size="large"
-                onClick={connect}
-            >
-              <Icon sx={{mr: 2, width: '40px', height: '40px'}}>
-                <img alt={'Logo metamask'} src={'/assets/logos/logo-metamask.svg'} />
-              </Icon>
-              {connected && account ? `Connected as: ${account}` : 'Connect With Metamask'}
-            </Button>
-            <Typography
-                color="error"
-                sx={{ mt: 3 }}
-                variant="body2"
-            >
+            <MetamaskButton connect={connect} connected={connected} account={account} />
+            <Typography color="error" sx={{ mt: 3 }} variant="body2">
               {errors[0]?.toString()}
             </Typography>
-            <Button
-                fullWidth
-                size="large"
-                sx={{ mt: 3 }}
-                onClick={handleSkip}
-            >
-              Login as admin
+            <Button fullWidth size="large" sx={{ mt: 3 }} onClick={handleSkip}>
+              Entrar como admin
             </Button>
           </div>
         </Box>
@@ -127,10 +95,6 @@ const Page = () => {
   );
 };
 
-Page.getLayout = (page) => (
-  <AuthLayout>
-    {page}
-  </AuthLayout>
-);
+Page.getLayout = (page) => <AuthLayout>{page}</AuthLayout>;
 
-export default Page;
\ No newline at end of file
+export default Page;
diff --git a/front-issuer/src/pages/auth/register.js b/front-issuer/src/pages/auth/register.js
index 71641a3..7ff1068 100644
--- a/front-issuer/src/pages/auth/register.js
+++ b/front-issuer/src/pages/auth/register.js
@@ -1,52 +1,50 @@
-import Head from 'next/head';
-import NextLink from 'next/link';
-import { useRouter } from 'next/navigation';
-import { useFormik } from 'formik';
-import * as Yup from 'yup';
-import {Box, Button, Icon, Link, Stack, TextField, Typography} from '@mui/material';
-import { useAuth } from 'src/hooks/use-auth';
-import { Layout as AuthLayout } from 'src/layouts/auth/layout';
-import {useState} from "react";
-import {useSDK} from "@metamask/sdk-react";
+import Head from "next/head";
+import NextLink from "next/link";
+import { useRouter } from "next/navigation";
+import { useFormik } from "formik";
+import * as Yup from "yup";
+import { Box, Button, Link, Stack, TextField, Typography } from "@mui/material";
+import { useAuth } from "src/hooks/use-auth";
+import { Layout as AuthLayout } from "src/layouts/auth/layout";
+import { useState } from "react";
+import { useSDK } from "@metamask/sdk-react";
 
 const Page = () => {
   const router = useRouter();
   const auth = useAuth();
-  const [account, setAccount] = useState('');
+  const [account, setAccount] = useState("");
   const { sdk, connected, chainId } = useSDK();
 
   const formik = useFormik({
     initialValues: {
-      name: 'Demo',
-      country: 'Brasil',
-      submit: null
+      name: "Demo",
+      country: "Brasil",
+      submit: null,
     },
     validationSchema: Yup.object({
-      name: Yup
-        .string()
-        .max(255)
-        .required('Name is required'),
-      country: Yup
-          .string()
-          .max(255)
-          .required('Country is required'),
+      name: Yup.string().max(255, "Máximo de 255 caracteres").required("Nome é obrigatório"),
+      country: Yup.string().max(255, "Máximo de 255 caracteres").required("País é obrigatório"),
     }),
     onSubmit: async (values, helpers) => {
       try {
         const { name, country } = values;
         const publicKey = account;
-        await auth.signUp(`${publicKey}@loopipay.com`, `pass${publicKey}`,{ name, country, publicKey });
-        router.push('/');
+        await auth.signUp(`${publicKey}@loopipay.com`, `pass${publicKey}`, {
+          name,
+          country,
+          publicKey,
+        });
+        router.push("/");
       } catch (err) {
-        const errorMessage = ['auth/email-already-in-use'].includes(err.code)
-            ? 'User with public key already exists'
-            : err.message;
+        const errorMessage = ["auth/email-already-in-use"].includes(err.code)
+          ? "Já existe um usuário com a chave pública fornecida"
+          : err.message;
 
         helpers.setStatus({ success: false });
         helpers.setErrors({ submit: errorMessage });
         helpers.setSubmitting(false);
       }
-    }
+    },
   });
 
   const connect = async () => {
@@ -54,100 +52,68 @@ const Page = () => {
       const accounts = await sdk?.connect();
       console.log(accounts, chainId);
       setAccount(accounts?.[0]);
-    } catch(err) {
-      console.warn(`failed to connect..`, err);
+    } catch (err) {
+      console.warn(`Falha ao conectar...`, err);
     }
   };
 
   return (
     <>
       <Head>
-        <title>
-          Register | Devias Kit
-        </title>
+        <title>Registro | Devias Kit</title>
       </Head>
       <Box
         sx={{
-          flex: '1 1 auto',
-          alignItems: 'center',
-          display: 'flex',
-          justifyContent: 'center'
+          flex: "1 1 auto",
+          alignItems: "center",
+          display: "flex",
+          justifyContent: "center",
         }}
       >
         <Box
           sx={{
             maxWidth: 550,
             px: 3,
-            py: '100px',
-            width: '100%'
+            py: "100px",
+            width: "100%",
           }}
         >
           <div>
-            <Stack
-              spacing={1}
-              sx={{ mb: 3 }}
-            >
-              <Typography variant="h4">
-                Register
-              </Typography>
-              <Typography
-                color="text.secondary"
-                variant="body2"
-              >
-                Already have an account?
-                &nbsp;
-                <Link
-                  component={NextLink}
-                  href="/auth/login"
-                  underline="hover"
-                  variant="subtitle2"
-                >
-                  Log in
+            <Stack spacing={1} sx={{ mb: 3 }}>
+              <Typography variant="h4">Registrar</Typography>
+              <Typography color="text.secondary" variant="body2">
+                Já tem uma conta? &nbsp;
+                <Link component={NextLink} href="/auth/login" underline="hover" variant="subtitle2">
+                  Entrar
                 </Link>
               </Typography>
             </Stack>
-            <form
-              noValidate
-              onSubmit={formik.handleSubmit}
-            >
+            <form noValidate onSubmit={formik.handleSubmit}>
               <Stack spacing={3}>
                 <TextField
                   error={!!(formik.touched.name && formik.errors.name)}
                   fullWidth
                   helperText={formik.touched.name && formik.errors.name}
-                  label="Name"
+                  label="Nome"
                   name="name"
                   onBlur={formik.handleBlur}
                   onChange={formik.handleChange}
                   value={formik.values.name}
                 />
                 <TextField
-                    error={!!(formik.touched.country && formik.errors.country)}
-                    fullWidth
-                    helperText={formik.touched.country && formik.errors.country}
-                    label="Country"
-                    name="country"
-                    onBlur={formik.handleBlur}
-                    onChange={formik.handleChange}
-                    value={formik.values.country}
+                  error={!!(formik.touched.country && formik.errors.country)}
+                  fullWidth
+                  helperText={formik.touched.country && formik.errors.country}
+                  label="País"
+                  name="country"
+                  onBlur={formik.handleBlur}
+                  onChange={formik.handleChange}
+                  value={formik.values.country}
                 />
-                <Button
-                    fullWidth
-                    size="large"
-                    onClick={connect}
-                >
-                  <Icon sx={{mr: 2, width: '40px', height: '40px'}}>
-                    <img alt={'Logo metamask'} src={'/assets/logos/logo-metamask.svg'} />
-                  </Icon>
-                  {connected && account ? `Connected as: ${account}` : 'Connect With Metamask'}
-                </Button>
+                <MetamaskButton connect={connect} connected={connected} account={account} />
               </Stack>
               {formik.errors.submit && (
-                <Typography
-                  color="error"
-                  sx={{ mt: 3 }}
-                  variant="body2"
-                >
+                <Typography color="error" sx={{ mt: 3 }} variant="body2">
                   {formik.errors.submit}
                 </Typography>
               )}
@@ -159,7 +125,7 @@ const Page = () => {
                 type="submit"
                 variant="contained"
               >
-                Continue
+                Continuar
               </Button>
             </form>
           </div>
@@ -169,10 +135,6 @@ const Page = () => {
   );
 };
 
-Page.getLayout = (page) => (
-  <AuthLayout>
-    {page}
-  </AuthLayout>
-);
+Page.getLayout = (page) => <AuthLayout>{page}</AuthLayout>;
 
-export default Page;
\ No newline at end of file
+export default Page;
diff --git a/front-issuer/src/sections/tokens/token-card.js b/front-issuer/src/sections/tokens/token-card.js
index 111b6ed..c98b2bd 100644
--- a/front-issuer/src/sections/tokens/token-card.js
+++ b/front-issuer/src/sections/tokens/token-card.js
@@ -1,35 +1,58 @@
-import { Avatar, Box, Button, Card, CardActions, CardContent, Divider, Link, Typography } from '@mui/material';
+import {
+  Avatar,
+  Box,
+  Button,
+  Card,
+  CardActions,
+  CardContent,
+  Divider,
+  Icon,
+  Link,
+  SvgIcon,
+  Typography,
+} from "@mui/material";
 import { ethers } from "ethers";
-import { useState } from 'react';
-import {useAuth} from "../../hooks/use-auth";
-import {RoleEnum} from "../../contexts/auth-context";
+import { useState } from "react";
+import { useAuth } from "../../hooks/use-auth";
+import { RoleEnum } from "../../contexts/auth-context";
+import { useSnackbar } from "notistack";
+import ArrowPathIcon from "@heroicons/react/24/solid/ArrowPathIcon";
 
 export const TokenCard = ({ token, account }) => {
+  const { enqueueSnackbar } = useSnackbar();
   const [isLoading, setIsLoading] = useState(false);
   const { user } = useAuth();
 
   const mintBRLX = async () => {
-    const signer = user.role === RoleEnum.ADMIN
-      ? new ethers.Wallet(process.env.NEXT_PUBLIC_ADM_PRIVATE_KEY, new ethers.JsonRpcProvider(process.env.NEXT_PUBLIC_RPC_URL))
-      : await (new ethers.BrowserProvider(window.ethereum)).getSigner();
+    const signer =
+      user.role === RoleEnum.ADMIN
+        ? new ethers.Wallet(
+            process.env.NEXT_PUBLIC_ADM_PRIVATE_KEY,
+            new ethers.JsonRpcProvider(process.env.NEXT_PUBLIC_RPC_URL)
+          )
+        : await new ethers.BrowserProvider(window.ethereum).getSigner();
 
-    const abi = 'function mint(address, uint256)';
+    const abi = "function mint(address, uint256)";
     const erc20Contract = new ethers.Contract(process.env.NEXT_PUBLIC_BRLX_CONTRACT, [abi], signer);
     setIsLoading(true);
 
-    const transaction = await erc20Contract.mint(account, 1000 * 10 ** 6)
-      .catch(err => {
-        console.error(err);
-        throw err;
+    const transaction = await erc20Contract.mint(account, 1000 * 10 ** 6).catch((err) => {
+      console.error(`mint:`, err);
+      enqueueSnackbar(`Erro no mint para ${process.env.NEXT_PUBLIC_BRLX_CONTRACT}`, {
+        variant: "error",
       });
-    await transaction.wait(5);
+      return null;
+    });
     setIsLoading(false);
-    window.location.reload();
-  }
+    if (transaction) {
+      await transaction.wait(5);
+      window.location.reload();
+    }
+  };
 
   const formatTokenQuantity = (quantity, decimals) => {
     if (quantity === 0n) {
-      return '0.0';
+      return "0.0";
     }
 
     quantity = quantity.toString();
@@ -37,64 +60,60 @@ export const TokenCard = ({ token, account }) => {
 
     const offset = quantity.length - decimals;
     return `${quantity.slice(0, offset)}.${quantity.slice(offset)}`;
-  }
+  };
 
   return (
     <Card>
       <CardContent>
         <Box
           sx={{
-            alignItems: 'center',
-            display: 'flex',
-            flexDirection: 'column'
+            alignItems: "center",
+            display: "flex",
+            flexDirection: "column",
           }}
         >
           <Avatar
             sx={{
               height: 80,
               mb: 2,
-              width: 80
+              width: 80,
             }}
           />
-          <Typography
-            gutterBottom
-            variant="h5"
-          >
+          <Typography gutterBottom variant="h5">
             {token.name}
           </Typography>
-          <Typography
-            color="text.secondary"
-            variant="body2"
-          >
+          <Typography color="text.secondary" variant="body2">
             Balance: {formatTokenQuantity(token.quantity, token.decimals)}
           </Typography>
         </Box>
       </CardContent>
       <Divider />
       <CardActions>
-        {
-          token.isToMint
-            ? (
-              <Button
-                fullWidth
-                variant="text"
-                onClick={mintBRLX}
-              >
-                Mint +1000
-              </Button>
-            )
-            : (
-              <Link
-                sx={{textAlign: 'center', width: '100%'}}
-                href={token.linkGetMore}
-                target={'_blank'}
-                className={'MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButton-fullWidth MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButton-fullWidth css-ir6wn7-MuiButtonBase-root-MuiButton-root'}
-              >
-                Get More
-              </Link>
-            )
-        }
+        {isLoading ? (
+          <Button fullWidth disabled>
+            <Icon sx={{ mr: 2, width: "40px", height: "40px" }}>
+              <SvgIcon>
+                <ArrowPathIcon />
+              </SvgIcon>
+            </Icon>
+          </Button>
+        ) : token.isToMint ? (
+          <Button fullWidth variant="text" onClick={mintBRLX}>
+            Mint +1000
+          </Button>
+        ) : (
+          <Link
+            sx={{ textAlign: "center", width: "100%" }}
+            href={token.linkGetMore}
+            target={"_blank"}
+            className={
+              "MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButton-fullWidth MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButton-fullWidth css-ir6wn7-MuiButtonBase-root-MuiButton-root"
+            }
+          >
+            Get More
+          </Link>
+        )}
       </CardActions>
     </Card>
   );
-}
\ No newline at end of file
+};
diff --git a/front-issuer/src/sections/tpf/tpf-buy.js b/front-issuer/src/sections/tpf/tpf-buy.js
index ad5a455..998c6f5 100644
--- a/front-issuer/src/sections/tpf/tpf-buy.js
+++ b/front-issuer/src/sections/tpf/tpf-buy.js
@@ -1,28 +1,36 @@
-import { forwardRef, useEffect, useState } from 'react';
-import PropTypes from 'prop-types';
-import { Box, Button, TextField, Stack, Dialog, DialogContent, DialogContentText, DialogTitle, Slide, Icon, Skeleton, Typography, CircularProgress } from '@mui/material';
-import { useFormik } from 'formik';
-import * as Yup from 'yup';
+import { forwardRef, useEffect, useState } from "react";
+import PropTypes from "prop-types";
+import {
+  Box,
+  Button,
+  TextField,
+  Stack,
+  Dialog,
+  DialogContent,
+  DialogContentText,
+  DialogTitle,
+  Slide,
+  Icon,
+  Skeleton,
+  Typography,
+  CircularProgress,
+} from "@mui/material";
+import { useFormik } from "formik";
+import * as Yup from "yup";
 import { useSDK } from "@metamask/sdk-react";
-import { useTPF } from 'src/hooks/use-tpf';
-import { addDays, format } from 'date-fns';
-import BigNumber from 'bignumber.js';
-import { NumericFormat } from 'react-number-format';
-import { useSnackbar } from 'notistack';
+import { useTPF } from "src/hooks/use-tpf";
+import { addDays, format } from "date-fns";
+import BigNumber from "bignumber.js";
+import { NumericFormat } from "react-number-format";
+import { useSnackbar } from "notistack";
+import { MetamaskButton } from "src/components/metamask-button";
 
-const Transition = forwardRef(function Transition(
-  props,
-  ref
-) {
+const Transition = forwardRef(function Transition(props, ref) {
   return <Slide direction="left" ref={ref} {...props} />;
 });
 
 export const TPFBuy = (props) => {
-  const {
-    open,
-    handleClose,
-    tpf = {}
-  } = props;
+  const { open, handleClose, tpf = {} } = props;
 
   const { enqueueSnackbar } = useSnackbar();
 
@@ -35,10 +43,9 @@ export const TPFBuy = (props) => {
       amount: 1000,
     },
     validationSchema: Yup.object({
-      amount: Yup
-        .number()
-        .min(tpf.minimumValue)
-        .required('Valor mínimo é obrigatório'),
+      amount: Yup.number()
+        .min(tpf.minimumValue, `Valor informado deve ser maior que ${tpf.minimumValue}`)
+        .required("Valor mínimo é obrigatório"),
     }),
     onSubmit: async (values) => {
       setIsLoadingSubmit(true);
@@ -52,8 +59,8 @@ export const TPFBuy = (props) => {
         });
         setSubmitProgress(20);
         const txHash = await sdk.getProvider().request({
-          method: 'eth_sendTransaction',
-          params: [txAllowance]
+          method: "eth_sendTransaction",
+          params: [txAllowance],
         });
         setSubmitProgress(40);
         console.info(`eth_sendTransaction:approve `, txHash);
@@ -65,9 +72,12 @@ export const TPFBuy = (props) => {
         setSubmitProgress(50);
       } catch (error) {
         console.error(`approve:`, error);
-        enqueueSnackbar(`Erro para aprovar a transferencia de token do contrato ${tpf.contractAddress} para o contrato ${tpf.asset}`, {
-          variant: "error"
-        });
+        enqueueSnackbar(
+          `Erro para aprovar a transferencia de token do contrato ${tpf.contractAddress} para o contrato ${tpf.asset}`,
+          {
+            variant: "error",
+          }
+        );
         setIsLoadingSubmit(false);
         return;
       }
@@ -82,8 +92,8 @@ export const TPFBuy = (props) => {
         setSubmitProgress(75);
         console.debug(`tx:`, tx);
         const txHash = await sdk.getProvider().request({
-          method: 'eth_sendTransaction',
-          params: [tx]
+          method: "eth_sendTransaction",
+          params: [tx],
         });
         setSubmitProgress(100);
         enqueueSnackbar(`Transação de investimento: ${txHash}`, {
@@ -93,11 +103,11 @@ export const TPFBuy = (props) => {
       } catch (error) {
         console.error(`deposit:`, error);
         enqueueSnackbar(`Erro para concretizar o investimento no contrato ${tpf.contractAddress}`, {
-          variant: "error"
+          variant: "error",
         });
       }
       setIsLoadingSubmit(false);
-    }
+    },
   });
 
   useEffect(() => {
@@ -115,42 +125,42 @@ export const TPFBuy = (props) => {
 
   useEffect(() => {
     if (!connected) connect();
-  }, [connected])
+  }, [connected]);
 
   const getExpirationDate = () => {
     if (tpf?.startTimestamp) {
       const expirationDate = addDays(tpf.startTimestamp, tpf.durationDays);
-      return format(expirationDate, 'dd/MM/yyyy');
+      return format(expirationDate, "dd/MM/yyyy");
     }
-  }
+  };
 
   const [unitPrice, setUnitPrice] = useState(null);
   useEffect(() => {
     if (open && tpf?.contractAddress) {
       getPrice({
         contractAddress: tpf.contractAddress,
-        timestamp: Date.now() / 1000
+        timestamp: Date.now() / 1000,
       }).then((price) => {
         setUnitPrice(price);
-      })
+      });
       const timer = setInterval(async () => {
-        console.info(`price:refreshed`)
+        console.info(`price:refreshed`);
         const price = await getPrice({
           contractAddress: tpf.contractAddress,
-          timestamp: Date.now() / 1000
+          timestamp: Date.now() / 1000,
         });
         setUnitPrice(price);
       }, 10_000);
 
       return () => {
-        console.info(`price:refresh:stopped`)
+        console.info(`price:refresh:stopped`);
         clearInterval(timer);
-      }
+      };
     }
-  }, [open, tpf])
+  }, [open, tpf]);
 
   const [lastSimulatedValue, setLastSimulatedValue] = useState(new BigNumber(0));
-  const [simulated, setSimulated] = useState(false)
+  const [simulated, setSimulated] = useState(false);
   const simulate = () => {
     const amount = new BigNumber(formik.values.amount).shiftedBy(tpf.decimals);
     preview({
@@ -158,48 +168,57 @@ export const TPFBuy = (props) => {
       contractAddress: tpf.contractAddress,
       timestamp: Date.now() / 1000,
     }).then((quantity) => {
-      setLastSimulatedValue(new BigNumber(quantity).shiftedBy(-tpf.decimals))
+      setLastSimulatedValue(new BigNumber(quantity).shiftedBy(-tpf.decimals));
       setSimulated(true);
     });
-  }
+  };
 
   const clearSimulated = () => {
     if (simulated) setSimulated(false);
-  }
+  };
 
   const handleChangeAmount = (e) => {
     clearSimulated();
     formik.handleChange(e);
-  }
+  };
 
   useEffect(() => {
     if (simulated) simulate();
   }, [unitPrice]);
 
   return (
-    <Dialog
-      TransitionComponent={Transition}
-      open={open}
-      onClose={handleClose}
-    >
+    <Dialog TransitionComponent={Transition} open={open} onClose={handleClose}>
       <DialogTitle textAlign="center">Compra de Título Público</DialogTitle>
       <DialogContent>
-        <DialogContentText>
-          <strong>Símbolo:</strong> {tpf.symbol}<br />
-          <strong>Nome:</strong> {tpf.name}<br />
-          <strong>Endereço do Contrato:</strong> {tpf.contractAddress}<br />
-          <strong>Data de Vencimento:</strong> {getExpirationDate()}<br />
-          <strong>Rentabilidade:</strong> {(tpf.yield / 100).toFixed(2)}%<br />
-          <strong>Valor Mínimo:</strong> {tpf.minimumValue}<br />
-          {
-            unitPrice &&
-            (<><strong>Preço Unitário:</strong> {new BigNumber(unitPrice).shiftedBy(-tpf.decimals).toString()}<br /></>)
-          }
-        </DialogContentText>
-        <form
-          noValidate
-          onSubmit={formik.handleSubmit}
+        <DialogContentText
+          style={{
+            display: "grid",
+            gridTemplateColumns: "35% 1fr",
+            gap: "8px",
+          }}
         >
+          <strong>Símbolo:</strong>
+          <span>{tpf.symbol}</span>
+          <strong>Nome:</strong>
+          <span>{tpf.name}</span>
+          <div style={{ gridColumnStart: 1, gridColumnEnd: 3 }}>
+            <strong>Endereço do Contrato:</strong>
+            <p style={{ textAlign: "right", margin: 0, padding: 0 }}> {tpf.contractAddress}</p>
+          </div>
+          <strong>Data de Vencimento:</strong>
+          <span>{getExpirationDate()}</span>
+          <strong>Rentabilidade:</strong>
+          <span>{(tpf.yield / 100).toFixed(2)}%</span>
+          <strong>Valor Mínimo:</strong>
+          <span>{tpf.minimumValue}</span>
+          {unitPrice && (
+            <>
+              <strong>Preço Unitário:</strong>{" "}
+              <span>{new BigNumber(unitPrice).shiftedBy(-tpf.decimals).toString()}</span>
+            </>
+          )}
+        </DialogContentText>
+        <form noValidate onSubmit={formik.handleSubmit}>
           <Stack spacing={3}>
             <NumericFormat
               error={!!(formik.touched.amount && formik.errors.amount)}
@@ -215,23 +234,10 @@ export const TPFBuy = (props) => {
               fixedDecimalScale
               customInput={TextField}
             />
-            <Button
-              fullWidth
-              size="large"
-              onClick={connect}
-            >
-              <Icon sx={{ mr: 2, width: '40px', height: '40px' }}>
-                <img alt={'Logo metamask'} src={'/assets/logos/logo-metamask.svg'} />
-              </Icon>
-              {connected && account ? `Connected as: ${account}` : 'Connect With Metamask'}
-            </Button>
+            <MetamaskButton connect={connect} connected={connected} account={account} />
           </Stack>
           {formik.errors.submit && (
-            <Typography
-              color="error"
-              sx={{ mt: 3 }}
-              variant="body2"
-            >
+            <Typography color="error" sx={{ mt: 3 }} variant="body2">
               {formik.errors.submit}
             </Typography>
           )}
@@ -240,45 +246,48 @@ export const TPFBuy = (props) => {
               <DialogContentText sx={{ mt: 1 }} textAlign="center">
                 <strong>Quantidade a receber:</strong> {lastSimulatedValue.toFormat(tpf.decimals)}
               </DialogContentText>
-              <Box sx={{ display: 'flex', mt: 3, justifyContent: 'center' }}>
+              <Box sx={{ display: "flex", mt: 3, justifyContent: "center" }}>
                 <CircularProgress variant="determinate" value={submitProgress} />
                 Carregando...
               </Box>
             </>
-          ) : (<>
-            <Button
-              disabled={unitPrice === null || unitPrice === undefined}
-              fullWidth
-              size="large"
-              sx={{ mt: 1 }}
-              type="button"
-              variant="contained"
-              color="secondary"
-              onClick={simulate}
-            >
-              Simular
-            </Button>
-            {
-              !simulated ? <Skeleton animation="wave" variant="text" sx={{ mt: 1 }} />
-                : <DialogContentText sx={{ mt: 1 }} textAlign="center">
+          ) : (
+            <>
+              <Button
+                disabled={unitPrice === null || unitPrice === undefined}
+                fullWidth
+                size="large"
+                sx={{ mt: 1 }}
+                type="button"
+                variant="contained"
+                color="secondary"
+                onClick={simulate}
+              >
+                Simular
+              </Button>
+              {!simulated ? (
+                <Skeleton animation="wave" variant="text" sx={{ mt: 1 }} />
+              ) : (
+                <DialogContentText sx={{ mt: 1 }} textAlign="center">
                   <strong>Quantidade a receber:</strong> {lastSimulatedValue.toFormat(tpf.decimals)}
                 </DialogContentText>
-            }
-            <Button
-              disabled={!connected || !account || !simulated}
-              fullWidth
-              size="large"
-              sx={{ mt: 1 }}
-              type="submit"
-              variant="contained"
-            >
-              Comprar
-            </Button>
-          </>)}
+              )}
+              <Button
+                disabled={!connected || !account || !simulated}
+                fullWidth
+                size="large"
+                sx={{ mt: 1 }}
+                type="submit"
+                variant="contained"
+              >
+                Comprar
+              </Button>
+            </>
+          )}
         </form>
       </DialogContent>
     </Dialog>
-  )
+  );
 };
 
 TPFBuy.propTypes = {
@@ -286,4 +295,3 @@ TPFBuy.propTypes = {
   handleClose: PropTypes.func,
   tpf: PropTypes.object,
 };
-
